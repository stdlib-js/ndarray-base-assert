{
  "version": 3,
  "sources": ["../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name hasEqualShape\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/has-equal-shape}\n*/\nsetReadOnly( ns, 'hasEqualShape', require( '@stdlib/ndarray-base-assert-has-equal-shape' ) );\n\n/**\n* @name isAllowedDataTypeCast\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-allowed-data-type-cast}\n*/\nsetReadOnly( ns, 'isAllowedDataTypeCast', require( '@stdlib/ndarray-base-assert-is-allowed-data-type-cast' ) );\n\n/**\n* @name isBooleanDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-boolean-data-type}\n*/\nsetReadOnly( ns, 'isBooleanDataType', require( '@stdlib/ndarray-base-assert-is-boolean-data-type' ) );\n\n/**\n* @name isBooleanIndexDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-boolean-index-data-type}\n*/\nsetReadOnly( ns, 'isBooleanIndexDataType', require( '@stdlib/ndarray-base-assert-is-boolean-index-data-type' ) );\n\n/**\n* @name isBufferLengthCompatible\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-buffer-length-compatible}\n*/\nsetReadOnly( ns, 'isBufferLengthCompatible', require( '@stdlib/ndarray-base-assert-is-buffer-length-compatible' ) );\n\n/**\n* @name isBufferLengthCompatibleShape\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-buffer-length-compatible-shape}\n*/\nsetReadOnly( ns, 'isBufferLengthCompatibleShape', require( '@stdlib/ndarray-base-assert-is-buffer-length-compatible-shape' ) );\n\n/**\n* @name isCastingMode\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-casting-mode}\n*/\nsetReadOnly( ns, 'isCastingMode', require( '@stdlib/ndarray-base-assert-is-casting-mode' ) );\n\n/**\n* @name isColumnMajor\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-column-major}\n*/\nsetReadOnly( ns, 'isColumnMajor', require( '@stdlib/ndarray-base-assert-is-column-major' ) );\n\n/**\n* @name isColumnMajorContiguous\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-column-major-contiguous}\n*/\nsetReadOnly( ns, 'isColumnMajorContiguous', require( '@stdlib/ndarray-base-assert-is-column-major-contiguous' ) );\n\n/**\n* @name isColumnMajorString\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-column-major-string}\n*/\nsetReadOnly( ns, 'isColumnMajorString', require( '@stdlib/ndarray-base-assert-is-column-major-string' ) );\n\n/**\n* @name isComplexFloatingPointDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-complex-floating-point-data-type}\n*/\nsetReadOnly( ns, 'isComplexFloatingPointDataType', require( '@stdlib/ndarray-base-assert-is-complex-floating-point-data-type' ) );\n\n/**\n* @name isContiguous\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-contiguous}\n*/\nsetReadOnly( ns, 'isContiguous', require( '@stdlib/ndarray-base-assert-is-contiguous' ) );\n\n/**\n* @name isDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-data-type}\n*/\nsetReadOnly( ns, 'isDataType', require( '@stdlib/ndarray-base-assert-is-data-type' ) );\n\n/**\n* @name isFloatingPointDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-floating-point-data-type}\n*/\nsetReadOnly( ns, 'isFloatingPointDataType', require( '@stdlib/ndarray-base-assert-is-floating-point-data-type' ) );\n\n/**\n* @name isIndexDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-index-data-type}\n*/\nsetReadOnly( ns, 'isIndexDataType', require( '@stdlib/ndarray-base-assert-is-index-data-type' ) );\n\n/**\n* @name isIndexMode\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-index-mode}\n*/\nsetReadOnly( ns, 'isIndexMode', require( '@stdlib/ndarray-base-assert-is-index-mode' ) );\n\n/**\n* @name isInputCastingPolicy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-input-casting-policy}\n*/\nsetReadOnly( ns, 'isInputCastingPolicy', require( '@stdlib/ndarray-base-assert-is-input-casting-policy' ) );\n\n/**\n* @name isIntegerDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-integer-data-type}\n*/\nsetReadOnly( ns, 'isIntegerDataType', require( '@stdlib/ndarray-base-assert-is-integer-data-type' ) );\n\n/**\n* @name isIntegerIndexDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-integer-index-data-type}\n*/\nsetReadOnly( ns, 'isIntegerIndexDataType', require( '@stdlib/ndarray-base-assert-is-integer-index-data-type' ) );\n\n/**\n* @name isMaskIndexDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-mask-index-data-type}\n*/\nsetReadOnly( ns, 'isMaskIndexDataType', require( '@stdlib/ndarray-base-assert-is-mask-index-data-type' ) );\n\n/**\n* @name isMostlySafeDataTypeCast\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-mostly-safe-data-type-cast}\n*/\nsetReadOnly( ns, 'isMostlySafeDataTypeCast', require( '@stdlib/ndarray-base-assert-is-mostly-safe-data-type-cast' ) );\n\n/**\n* @name isNumericDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-numeric-data-type}\n*/\nsetReadOnly( ns, 'isNumericDataType', require( '@stdlib/ndarray-base-assert-is-numeric-data-type' ) );\n\n/**\n* @name isOrder\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-order}\n*/\nsetReadOnly( ns, 'isOrder', require( '@stdlib/ndarray-base-assert-is-order' ) );\n\n/**\n* @name isOutputDataTypePolicy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-output-data-type-policy}\n*/\nsetReadOnly( ns, 'isOutputDataTypePolicy', require( '@stdlib/ndarray-base-assert-is-output-data-type-policy' ) );\n\n/**\n* @name isReadOnly\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-read-only}\n*/\nsetReadOnly( ns, 'isReadOnly', require( '@stdlib/ndarray-base-assert-is-read-only' ) );\n\n/**\n* @name isRealDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-real-data-type}\n*/\nsetReadOnly( ns, 'isRealDataType', require( '@stdlib/ndarray-base-assert-is-real-data-type' ) );\n\n/**\n* @name isRealFloatingPointDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-real-floating-point-data-type}\n*/\nsetReadOnly( ns, 'isRealFloatingPointDataType', require( '@stdlib/ndarray-base-assert-is-real-floating-point-data-type' ) );\n\n/**\n* @name isRowMajor\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-row-major}\n*/\nsetReadOnly( ns, 'isRowMajor', require( '@stdlib/ndarray-base-assert-is-row-major' ) );\n\n/**\n* @name isRowMajorContiguous\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-row-major-contiguous}\n*/\nsetReadOnly( ns, 'isRowMajorContiguous', require( '@stdlib/ndarray-base-assert-is-row-major-contiguous' ) );\n\n/**\n* @name isRowMajorString\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-row-major-string}\n*/\nsetReadOnly( ns, 'isRowMajorString', require( '@stdlib/ndarray-base-assert-is-row-major-string' ) );\n\n/**\n* @name isSafeDataTypeCast\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-safe-data-type-cast}\n*/\nsetReadOnly( ns, 'isSafeDataTypeCast', require( '@stdlib/ndarray-base-assert-is-safe-data-type-cast' ) );\n\n/**\n* @name isSameKindDataTypeCast\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-same-kind-data-type-cast}\n*/\nsetReadOnly( ns, 'isSameKindDataTypeCast', require( '@stdlib/ndarray-base-assert-is-same-kind-data-type-cast' ) );\n\n/**\n* @name isScalarMostlySafeCompatible\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-scalar-mostly-safe-compatible}\n*/\nsetReadOnly( ns, 'isScalarMostlySafeCompatible', require( '@stdlib/ndarray-base-assert-is-scalar-mostly-safe-compatible' ) );\n\n/**\n* @name isSignedIntegerDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-signed-integer-data-type}\n*/\nsetReadOnly( ns, 'isSignedIntegerDataType', require( '@stdlib/ndarray-base-assert-is-signed-integer-data-type' ) );\n\n/**\n* @name isSingleSegmentCompatible\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-single-segment-compatible}\n*/\nsetReadOnly( ns, 'isSingleSegmentCompatible', require( '@stdlib/ndarray-base-assert-is-single-segment-compatible' ) );\n\n/**\n* @name isUnsignedIntegerDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-unsigned-integer-data-type}\n*/\nsetReadOnly( ns, 'isUnsignedIntegerDataType', require( '@stdlib/ndarray-base-assert-is-unsigned-integer-data-type' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n"],
  "mappings": "aA0BA,IAAIA,EAAc,QAAS,yCAA0C,EAUjEC,EAAK,CAAC,EASVD,EAAaC,EAAI,gBAAiB,QAAS,6CAA8C,CAAE,EAS3FD,EAAaC,EAAI,wBAAyB,QAAS,uDAAwD,CAAE,EAS7GD,EAAaC,EAAI,oBAAqB,QAAS,kDAAmD,CAAE,EASpGD,EAAaC,EAAI,yBAA0B,QAAS,wDAAyD,CAAE,EAS/GD,EAAaC,EAAI,2BAA4B,QAAS,yDAA0D,CAAE,EASlHD,EAAaC,EAAI,gCAAiC,QAAS,+DAAgE,CAAE,EAS7HD,EAAaC,EAAI,gBAAiB,QAAS,6CAA8C,CAAE,EAS3FD,EAAaC,EAAI,gBAAiB,QAAS,6CAA8C,CAAE,EAS3FD,EAAaC,EAAI,0BAA2B,QAAS,wDAAyD,CAAE,EAShHD,EAAaC,EAAI,sBAAuB,QAAS,oDAAqD,CAAE,EASxGD,EAAaC,EAAI,iCAAkC,QAAS,iEAAkE,CAAE,EAShID,EAAaC,EAAI,eAAgB,QAAS,2CAA4C,CAAE,EASxFD,EAAaC,EAAI,aAAc,QAAS,0CAA2C,CAAE,EASrFD,EAAaC,EAAI,0BAA2B,QAAS,yDAA0D,CAAE,EASjHD,EAAaC,EAAI,kBAAmB,QAAS,gDAAiD,CAAE,EAShGD,EAAaC,EAAI,cAAe,QAAS,2CAA4C,CAAE,EASvFD,EAAaC,EAAI,uBAAwB,QAAS,qDAAsD,CAAE,EAS1GD,EAAaC,EAAI,oBAAqB,QAAS,kDAAmD,CAAE,EASpGD,EAAaC,EAAI,yBAA0B,QAAS,wDAAyD,CAAE,EAS/GD,EAAaC,EAAI,sBAAuB,QAAS,qDAAsD,CAAE,EASzGD,EAAaC,EAAI,2BAA4B,QAAS,2DAA4D,CAAE,EASpHD,EAAaC,EAAI,oBAAqB,QAAS,kDAAmD,CAAE,EASpGD,EAAaC,EAAI,UAAW,QAAS,sCAAuC,CAAE,EAS9ED,EAAaC,EAAI,yBAA0B,QAAS,wDAAyD,CAAE,EAS/GD,EAAaC,EAAI,aAAc,QAAS,0CAA2C,CAAE,EASrFD,EAAaC,EAAI,iBAAkB,QAAS,+CAAgD,CAAE,EAS9FD,EAAaC,EAAI,8BAA+B,QAAS,8DAA+D,CAAE,EAS1HD,EAAaC,EAAI,aAAc,QAAS,0CAA2C,CAAE,EASrFD,EAAaC,EAAI,uBAAwB,QAAS,qDAAsD,CAAE,EAS1GD,EAAaC,EAAI,mBAAoB,QAAS,iDAAkD,CAAE,EASlGD,EAAaC,EAAI,qBAAsB,QAAS,oDAAqD,CAAE,EASvGD,EAAaC,EAAI,yBAA0B,QAAS,yDAA0D,CAAE,EAShHD,EAAaC,EAAI,+BAAgC,QAAS,8DAA+D,CAAE,EAS3HD,EAAaC,EAAI,0BAA2B,QAAS,yDAA0D,CAAE,EASjHD,EAAaC,EAAI,4BAA6B,QAAS,0DAA2D,CAAE,EASpHD,EAAaC,EAAI,4BAA6B,QAAS,2DAA4D,CAAE,EAKrH,OAAO,QAAUA",
  "names": ["setReadOnly", "ns"]
}
